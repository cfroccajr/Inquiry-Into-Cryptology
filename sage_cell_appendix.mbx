<?xml version="1.0" encoding="UTF-8" ?>

<!--********************************************************************
Copyright 2017 Charles F. Rocca Jr

This file is part of a MathBook XML project.

This project is focused on creating a brief inquiry based text for 
use in a introductory course in cryptology for non-technical students.  
The material is presented, whenever possible, in a historically honest 
manner.

Copyright 2015 Robert A. Beezer

This file is part of MathBook XML.

MathBook XML is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 or version 3 of the
License (at your option).

MathBook XML is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MathBook XML.  If not, see <http://www.gnu.org/licenses/>.
*********************************************************************-->


<appendix xml:id="sage_cells">
	<title>Sage Cell Utilities</title>

            <p>N-Gram Analysis Cell</p>
            <sage xml:id="sage_ngram_cell">
                <input>
@interact
def ngram_count_simple(
                    text=input_box('Place the text that you would like to analyze here!!!', 
                    label="Enter your message", height=3, width=80, type=str),N=[1..6]):
    message = str(text).upper()
    count = {}
    for i in range(len(text)-N+1):
        c = message[i:i+N]
        if c in count: count[c] += 1
        else: count[c] = 1
    print "The length of your message is {}".format(len(message))
    for c in count:
        print c,"appears",count[c],"times, with frequency",str(count[c]/len(message)*1.0) 
                </input>
                <output>
                    [{' ': 9,'!': 3,'A': 4,'C': 1,'D': 1,'E': 7,'H': 3,'I': 1,
                        'K': 1,'L': 4,'N': 1,'O': 3,'P': 1,'R': 1,'T': 6,'U': 2,
                        'W': 1,'X': 1,'Y': 2,'Z': 1},53]
                </output>
            </sage>

    	<p>Substitution Cipher Cell</p>
    	<sage xml:id="sage_sub_cell">
        	<input>

<!-- Python/Sage Function -->
@interact
def _(k = input_grid(2,13, 
    default = [['a','b','c','d','e','f','g','h','i','j','k','l','m'],
    ['n','o','p','q','r','s','t','u','v','w','x','y','z']],
    label='Cipher Alphabet:', type=str,width=1),
      m=input_box('sage', label="Message", height=3, width=80, type=str)):
    key=""
    for i in range(0,2):
        for j in range(0,13):
            key=key+str(k[i][j])
            #print str(key)
    print "Your cipher key is:", str(key)

    # S is a generic substatution cipher system.
    S = SubstitutionCryptosystem(AlphabeticStrings())

    # K and Ki are the key and inverse key for S
    K=S.encoding(str(key))
    Ki=S.inverse_key(K)

    # e and d are the enciphering and deciphering routines
    e=S(K)
    d=S(Ki)

    # M is your message which you wish to encipher or decipher
    M=S.encoding(str(m))
    print "Encoding with this key we get:", e(M)
    print "Decocing with this key we get:", d(M)
            </input>
            <output></output>
        </sage>



    	<p>Shift Cipher Cell</p>
    	<sage xml:id="sage_shift_cell">
        	<input>

<!-- Python/Sage Function -->
@interact
def _(m=input_box('sage', label="Enter your message", height=3, width=80, type=str),shift=[0..25]):
    S = ShiftCryptosystem(AlphabeticStrings())
    e = S(shift)
    clean_text = S.encoding(str(m))
    print "Your plain text is {}".format(m)
    print "Your shifted cipher text is {}".format(e(clean_text))

    		</input>
    		<output></output>
    	</sage>
</appendix>

