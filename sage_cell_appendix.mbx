<?xml version="1.0" encoding="UTF-8" ?>

<!--********************************************************************
Copyright 2017 Charles F. Rocca Jr

This file is part of a MathBook XML project.

This project is focused on creating a brief inquiry based text for 
use in a introductory course in cryptology for non-technical students.  
The material is presented, whenever possible, in a historically honest 
manner.

Copyright 2015 Robert A. Beezer

This file is part of MathBook XML.

MathBook XML is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 or version 3 of the
License (at your option).

MathBook XML is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MathBook XML.  If not, see <http://www.gnu.org/licenses/>.
*********************************************************************-->


<appendix xml:id="sage_cells">
	<title>Sage Cell Utilities</title>

            <p>N-Gram Analysis Cell</p>
            <sage xml:id="sage_ngram_cell">
                <input>
import re
@interact
def ngram_count_simple(
                    text=input_box('Place the text that you would like to analyze here!!!', 
                    label="Enter your message", height=3, width=60, type=str),N=[1..6]):
    message = re.sub('[^A-Z]','',str(text).upper())
    count = {}
    for i in range(len(message)-N+1):
        c = message[i:i+N]
        if c in count: count[c] += 1
        else: count[c] = 1
    print "The length of your message is {}".format(len(message))
    for c in count:
        print c,"appears",count[c],"times, with frequency %.4G" % (count[c]/len(message)*100.0), "percent"
                </input>
                <output>
                    [{' ': 9,'!': 3,'A': 4,'C': 1,'D': 1,'E': 7,'H': 3,'I': 1,
                        'K': 1,'L': 4,'N': 1,'O': 3,'P': 1,'R': 1,'T': 6,'U': 2,
                        'W': 1,'X': 1,'Y': 2,'Z': 1},53]
                </output>
            </sage>

    	<p>Substitution Cipher Cell</p>
    	<sage xml:id="sage_sub_cell">
        	<input>

<!-- Python/Sage Function -->
@interact
def _(k = input_grid(2,13, 
    default = [['a','b','c','d','e','f','g','h','i','j','k','l','m'],
    ['n','o','p','q','r','s','t','u','v','w','x','y','z']],
    label='Cipher Alphabet:', type=str,width=1),
      m=input_box('sage', label="Message", height=3, width=60, type=str)):
    key=""
    for i in range(0,2):
        for j in range(0,13):
            key=key+str(k[i][j])
            #print str(key)
    print"Your cipher key is:", str(key)
    S = SubstitutionCryptosystem(AlphabeticStrings())
    K=S.encoding(str(key))
    e=S(K)
    clean_text = S.encoding(str(m))
    cipher_text = e(clean_text)
    print "Your substitution enciphering text is\n"
    for i in xrange(0,len(cipher_text),5):
        print cipher_text[i:i+5],
        if i%50 == 0 and i>0: print "\n"
            </input>
            <output></output>
        </sage>



    	<p>Shift Cipher Cell</p>
    	<sage xml:id="sage_shift_cell">
        	<input>

<!-- Python/Sage Function -->
@interact
def _(m=input_box('sage', label="Enter your message", height=3, width=60, type=str),shift=[0..25]):
    S = ShiftCryptosystem(AlphabeticStrings())
    e = S(shift)
    clean_text = S.encoding(str(m))
    cipher_text = e(clean_text)
    print "Your shift enciphering text is\n"
    for i in xrange(0,len(cipher_text),5):
        print cipher_text[i:i+5],
        if i%50 == 0 and i>0: print "\n"

    		</input>
    		<output></output>
    	</sage>

    	<p>Affine Cipher Cell</p>
    	<sage xml:id="sage_affine_cell">
        	<input>

<!-- Python/Sage Function -->
@interact
def _(m=input_box('sage', label="Enter your message", height=3, width=60, type=str),a=[1..25], b=[0..25]):
    S = AffineCryptosystem(AlphabeticStrings())
    e = S(a,b)
    clean_text = S.encoding(str(m))
    cipher_text = e(clean_text)
    print "Your affine enciphering text is\n"
    for i in xrange(0,len(cipher_text),5):
        print cipher_text[i:i+5],
        if i%50 == 0 and i>0: print "\n"

    		</input>
    		<output></output>
    	</sage>

    	<p>Vigenere Cipher Cell</p>
    	<sage xml:id="sage_vigenere_cell">
        	<input>

<!-- Python/Sage Function -->
@interact
def _(m=input_box('sage', label="Enter your message", height=3, width=60, type=str),
		key=input_box('sage', label="Enter your key", height=1, width=20, type=str)):
    cipher_key=str(key)
    S = VigenereCryptosystem(AlphabeticStrings(),len(cipher_key))
    K = S.encoding(cipher_key)
    e = S(K)
    clean_text = S.encoding(str(m))
    cipher_text = e(clean_text)
    print "Your Vigenere enciphering text is\n"
    for i in xrange(0,len(cipher_text),5):
        print cipher_text[i:i+5],
        if i%50 == 0 and i>0: print "\n"

    		</input>
    		<output></output>
    	</sage>

    	<p>Hill Cipher Cell</p>
    	<sage xml:id="sage_hill_cell">
        	<input>

<!-- Python/Sage Function -->
@interact
def _(m=input_box('sage', label="Enter your message", height=3, 
    width=60, type=str),
	key=input_grid(2,2,default=[[1,0],[0,1]],type=int,width=2)):
    S = HillCryptosystem(AlphabeticStrings(),2)
    M = MatrixSpace(IntegerModRing(26),2,2)
    e = S(M(key))
    clean_text = S.encoding(str(m))
    if len(clean_text)%2 == 1:
        clean_text = S.encoding(str(m)+"Z")
    cipher_text = e(clean_text)
    print "Your Hill enciphering text is\n"
    for i in xrange(0,len(cipher_text),5):
        print cipher_text[i:i+5],
        if i%50 == 0 and i>0: print "\n"
    		</input>
    		<output></output>
    	</sage>


</appendix>

