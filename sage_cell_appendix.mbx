<?xml version="1.0" encoding="UTF-8" ?>

<!--********************************************************************
Copyright 2017 Charles F. Rocca Jr

This file is part of a MathBook XML project.

This project is focused on creating a brief inquiry based text for 
use in a introductory course in cryptology for non-technical students.  
The material is presented, whenever possible, in a historically honest 
manner.

Copyright 2015 Robert A. Beezer

This file is part of MathBook XML.

MathBook XML is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 or version 3 of the
License (at your option).

MathBook XML is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MathBook XML.  If not, see <http://www.gnu.org/licenses/>.
*********************************************************************-->


<appendix xml:id="sage_cells">
	<title>Sage Cell Utilities</title>


    	<p>Word Count Cell</p>
    	<sage xml:id="sage_word_cell">
        	<input>

<!-- Python/Sage Function -->
import re
@interact
def word_count_simple(
                    text=input_box('Place the text that you would like to analyze here!!!', 
                    label="Enter your message", height=3, width=50, type=str)):
    message = re.sub('[^A-Z]',' ',str(text.encode('ascii','replace')).upper())+" "
    count = {}
    words = 0
    c=""
    for l in message:
        if l==" ":
            if c in count:
                words += 1 
                count[c] += 1
            elif c!="": 
                count[c] = 1
                words += 1
            c=""
        else: c=c+l
    print "The total number of words in your message is {}".format(words)
    print "The number of distinct words in your message is {}".format(len(count))
    count = sorted([(value, key) for key, value in count.items()])
    print "Word\t\tCount\t\tPercent"
    count.reverse()
    for c in count[0:min(30,len(count))]:
        if len(c[1])>6: 
            tab="\t"
        else:
            tab="\t\t"
        print c[1],tab,c[0],"\t\t %.4G" % (c[0]/words*100.0)
    		</input>
    		<output></output>
    	</sage>

    	<p>String Count Cell</p>
    	<sage xml:id="sage_string_cell">
        	<input>

<!-- Python/Sage Function -->
import re
@interact
def word_count_simple(
                    text=input_box('Place the text that you would like to analyze here!!!', 
                    label="Enter your message", height=3, width=50, type=str),
                    key=input_box('sage', label="String to search", height=1, width=20, type=str)):
    message = re.sub('[^A-Z]','',str(text.encode('ascii','replace')).upper())+" "
    count = 0
    K = re.sub('[^A-Z]',' ',str(key.encode('ascii','replace')).upper())
    N = len(K)
    c=""
    for i in range(len(message)-N+1):
        c = message[i:i+N]
        if c == K: count += 1
    print "Your string appears ",str(count)," times."
    		</input>
    		<output></output>
    	</sage>    
    
    
            <p>N-Gram Analysis Cell</p>
            <sage xml:id="sage_ngram_cell">
                <input>
@interact
def ngram_count_simple(
                    text=input_box('Place the text that you would like to analyze here!!!', 
                    label="Enter your message", height=3, width=50, type=str),N=[1..6]):
    message = AlphabeticStrings().encoding(str(text.encode('ascii','replace')))
    count = {}
    for i in range(len(message)-N+1):
        c = message[i:i+N]
        if c in count: count[c] += 1
        else: count[c] = 1
    print "The length of your message is {}".format(len(message))
    count = sorted([(value, key) for key, value in count.items()])
    print "N-Gram\t\tCount\t\tPercent"
    count.reverse()
    for c in count[0:min(30,len(count))]:
        if len(c[1])>6: 
            tab="\t"
        else:
            tab="\t\t"
        print c[1],tab,c[0],"\t\t %.4G" % (c[0]/len(message)*100.0)
                </input>
                <output></output>
            </sage>

    	<p>Substitution Cipher Cell</p>
    	<sage xml:id="sage_sub_cell">
        	<input>

<!-- Python/Sage Function -->
@interact
def _(k = input_grid(3,9, 
    default = [['A','B','C','D','E','F','G','H','I'],
               ['J','K','L','M','N','O','P','Q','R'],
               ['S','T','U','V','W','X','Y','Z',' ']],
              label='Cipher Alphabet:', type=str,width=1),
              m=input_box('sage', label="Message", height=3, width=50, type=str)):
    plainAlpha = 'abcdefghijklmnopqrstuvwxyz'
    key=""
    for i in range(0,3):
        for j in range(0,9):
            key=key+str(k[i][j])
            #print str(key)
    S = SubstitutionCryptosystem(AlphabeticStrings())
    K = S.encoding(str(key))
    L = S.inverse_key(K)
    print "\nPlain alphabet is:",str(plainAlpha)
    print "Cipher alphabet is:", str(K)
    if len(str(K))!=26:
        print "\nYOUR CIPHER KEY IS THE WRONG LENGTH!!!\n"
    else:
        e = S(K)
        d = S(L)
        clean_text = S.encoding(str(m.encode('ascii','replace')))
        cipher_text = e(clean_text)
        plain_text = d(clean_text)
        print "\nYour substitution enciphering text is:"
        for i in xrange(0,len(cipher_text),5):
            print cipher_text[i:i+5],
            if (i+5)%50 == 0: print "\n"
        print "\n\nYour substitution deciphering text is:"
        for i in xrange(0,len(plain_text),5):
            print str(plain_text[i:i+5]).lower(),
            if (i+5)%50 == 0: print "\n"
            </input>
            <output></output>
        </sage>



    	<p>Shift Cipher Cell</p>
    	<sage xml:id="sage_shift_cell">
        	<input>

<!-- Python/Sage Function -->
@interact
def _(m=input_box('sage', label="Enter your message", height=3, width=50, type=str),shift=[0..25]):
    S = ShiftCryptosystem(AlphabeticStrings())
    e = S(shift)
    clean_text = S.encoding(str(m.encode('ascii','replace')))
    cipher_text = e(clean_text)
    print "Your shift enciphering text is\n"
    for i in xrange(0,len(cipher_text),5):
        print cipher_text[i:i+5],
        if (i+5)%50 == 0: print "\n"

    		</input>
    		<output></output>
    	</sage>

    	<p>Affine Cipher Cell</p>
    	<sage xml:id="sage_affine_cell">
        	<input>

<!-- Python/Sage Function -->
@interact
def _(m=input_box('sage', label="Enter your message", height=3, width=50, type=str),a=[1..25], b=[0..25]):
    S = AffineCryptosystem(AlphabeticStrings())
    e = S(a,b)
    clean_text = S.encoding(str(m.encode('ascii','replace')))
    cipher_text = e(clean_text)
    print "Your affine enciphering text is\n"
    for i in xrange(0,len(cipher_text),5):
        print cipher_text[i:i+5],
        if (i+5)%50 == 0: print "\n"

    		</input>
    		<output></output>
    	</sage>

    	<p>Vigenere Cipher Cell</p>
    	<sage xml:id="sage_vigenere_cell">
        	<input>

<!-- Python/Sage Function -->
@interact
def _(m=input_box('sage', label="Enter your message", height=3, width=50, type=str),
		key=input_box('sage', label="Enter your key", height=1, width=20, type=str)):
    cipher_key=str(key)
    S = VigenereCryptosystem(AlphabeticStrings(),len(cipher_key))
    K = S.encoding(cipher_key)
    e = S(K)
    clean_text = S.encoding(str(m.encode('ascii','replace')))
    cipher_text = e(clean_text)
    print "Your Vigenere enciphering text is\n"
    for i in xrange(0,len(cipher_text),5):
        print cipher_text[i:i+5],
        if (i+5)%50 == 0: print "\n"

    		</input>
    		<output></output>
    	</sage>

    	<p>Hill Cipher Cell</p>
    	<sage xml:id="sage_hill_cell">
        	<input>

<!-- Python/Sage Function -->
@interact
def _(m=input_box('sage', label="Enter your message", height=3, 
    width=50, type=str),
	key=input_grid(2,2,default=[[1,0],[0,1]],type=int,width=2)):
    S = HillCryptosystem(AlphabeticStrings(),2)
    M = MatrixSpace(IntegerModRing(26),2,2)
    e = S(M(key))
    clean_text = S.encoding(str(m.encode('ascii','replace')))
    if len(clean_text)%2 == 1:
        clean_text = S.encoding(str(m)+"Z")
    cipher_text = e(clean_text)
    print "Your Hill enciphering text is\n"
    for i in xrange(0,len(cipher_text),5):
        print cipher_text[i:i+5],
        if (i+5)%50 == 0: print "\n"
    		</input>
    		<output></output>
    	</sage>





</appendix>

